services:
  rabbitmq:
    image: rabbitmq
    ports:
      - "5672:5672"
    env_file:
      - .env
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  db:
    image: postgres:17-alpine
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - pgdata:/var/lib/postgresql/data

  app:
    # Build the image from the Dockerfile in the current directory
    build: .

    env_file:
      - .env

    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
    depends_on:
      db:
          condition: service_healthy
          restart: true
      rabbitmq:
          condition: service_healthy
          restart: true

  app-worker:
    # Build the image from the Dockerfile in the current directory
    build: .
    command: uv run -- celery -A otterball_nfl.tasks worker --loglevel=INFO

    env_file:
      - .env

    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
    depends_on:
      db:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true

  app-scheduler:
    # Build the image from the Dockerfile in the current directory
    build: .
    command: uv run -- celery -A otterball_nfl.tasks beat --loglevel=INFO

    env_file:
      - .env

    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
    depends_on:
      db:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
        restart: true

volumes:
  pgdata:
  rabbitmq: